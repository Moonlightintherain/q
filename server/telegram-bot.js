import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

class TelegramBot {
  constructor() {
    this.botToken = process.env.BOT_TOKEN;
    this.baseUrl = `https://api.telegram.org/bot${this.botToken}`;
  }

  async sendMessage(userId, message, options = {}) {
    try {
      console.log(`üì± Sending Telegram message to user ${userId}`);
      
      const payload = {
        chat_id: userId,
        text: message,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...options
      };

      const response = await axios.post(`${this.baseUrl}/sendMessage`, payload);
      
      if (response.data.ok) {
        console.log('‚úÖ Telegram message sent successfully');
        return { success: true, messageId: response.data.result.message_id };
      } else {
        console.error('‚ùå Telegram API error:', response.data);
        return { success: false, error: response.data.description };
      }
    } catch (error) {
      console.error('‚ùå Failed to send Telegram message:', error.response?.data || error.message);
      return { success: false, error: error.message };
    }
  }

  async sendWithdrawalNotification(userId, amount, transactionHash, walletAddress) {
    const tonViewerLink = `https://tonviewer.com/transaction/${transactionHash}`;
    
    const message = `
üéâ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>

üí∞ <b>–°—É–º–º–∞:</b> ${amount} TON
üìç <b>–ö–æ—à–µ–ª–µ–∫:</b> <code>${walletAddress}</code>
üîó <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:</b> <code>${transactionHash}</code>

üìä <b>–û—Ç—Å–ª–µ–¥–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:</b>
<a href="${tonViewerLink}">–û—Ç–∫—Ä—ã—Ç—å –≤ TonViewer</a>

‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Å–µ—Ç–∏ TON.
    `.trim();

    const options = {
      reply_markup: {
        inline_keyboard: [
          [{
            text: 'üìä –û—Ç–∫—Ä—ã—Ç—å –≤ TonViewer',
            url: tonViewerLink
          }]
        ]
      }
    };

    return await this.sendMessage(userId, message, options);
  }

  async sendDepositNotification(userId, amount, transactionHash) {
    const tonViewerLink = `https://tonviewer.com/transaction/${transactionHash}`;
    
    const message = `
üí∞ <b>–î–µ–ø–æ–∑–∏—Ç –ø–æ–ª—É—á–µ–Ω!</b>

üíé <b>–°—É–º–º–∞:</b> ${amount} TON
üîó <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:</b> <code>${transactionHash}</code>

üìä <b>–û—Ç—Å–ª–µ–¥–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:</b>
<a href="${tonViewerLink}">–û—Ç–∫—Ä—ã—Ç—å –≤ TonViewer</a>

‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å!
    `.trim();

    const options = {
      reply_markup: {
        inline_keyboard: [
          [{
            text: 'üìä –û—Ç–∫—Ä—ã—Ç—å –≤ TonViewer',
            url: tonViewerLink
          }]
        ]
      }
    };

    return await this.sendMessage(userId, message, options);
  }

  async sendErrorNotification(userId, operation, error) {
    const message = `
‚ùå <b>–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>

üîÑ <b>–û–ø–µ—Ä–∞—Ü–∏—è:</b> ${operation}
‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> ${error}

üìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
    `.trim();

    return await this.sendMessage(userId, message);
  }
}

export const telegramBot = new TelegramBot();
