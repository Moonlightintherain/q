import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

class TelegramBot {
  constructor() {
    this.botToken = process.env.BOT_TOKEN;
    this.baseUrl = `https://api.telegram.org/bot${this.botToken}`;
  }

  async sendMessage(userId, message, options = {}) {
    try {
      console.log(`üì± Sending Telegram message to user ${userId}`);

      const payload = {
        chat_id: userId,
        text: message,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...options
      };

      const response = await axios.post(`${this.baseUrl}/sendMessage`, payload);

      if (response.data.ok) {
        console.log('‚úÖ Telegram message sent successfully');
        return { success: true, messageId: response.data.result.message_id };
      } else {
        console.error('‚ùå Telegram API error:', response.data);
        return { success: false, error: response.data.description };
      }
    } catch (error) {
      console.error('‚ùå Failed to send Telegram message:', error.response?.data || error.message);
      return { success: false, error: error.message };
    }
  }

  async sendWithdrawalNotification(userId, amount, transactionHash, walletAddress) {
    const timestamp = Math.floor(Date.now() / 1000);
    const tonViewerLink = `https://tonviewer.com/transaction/${transactionHash}`;

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–¥—Ä–µ—Å –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
    const userFriendlyAddress = this.convertToUserFriendlyAddress(walletAddress);

    const message = `
üéâ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>

üí∞ <b>–°—É–º–º–∞:</b> ${amount} TON
üìç <b>–ö–æ—à–µ–ª–µ–∫:</b> <code>${userFriendlyAddress}</code>
üîó <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:</b> <code>${transactionHash}</code>
üïê <b>–í—Ä–µ–º—è:</b> ${timestamp}

üìä <b>–û—Ç—Å–ª–µ–¥–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:</b>
<a href="${tonViewerLink}">–û—Ç–∫—Ä—ã—Ç—å –≤ TonViewer</a>

‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Å–µ—Ç–∏ TON.
  `.trim();

    const options = {
      reply_markup: {
        inline_keyboard: [
          [{
            text: 'üìä –û—Ç–∫—Ä—ã—Ç—å –≤ TonViewer',
            url: tonViewerLink
          }]
        ]
      }
    };

    return await this.sendMessage(userId, message, options);
  }

  async sendDepositNotification(userId, amount, transactionHash) {
    const tonViewerLink = `https://tonviewer.com/transaction/${transactionHash}`;

    const message = `
üí∞ <b>–î–µ–ø–æ–∑–∏—Ç –ø–æ–ª—É—á–µ–Ω!</b>

üíé <b>–°—É–º–º–∞:</b> ${amount} TON
üîó <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:</b> <code>${transactionHash}</code>

üìä <b>–û—Ç—Å–ª–µ–¥–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:</b>
<a href="${tonViewerLink}">–û—Ç–∫—Ä—ã—Ç—å –≤ TonViewer</a>

‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å!
    `.trim();

    const options = {
      reply_markup: {
        inline_keyboard: [
          [{
            text: 'üìä –û—Ç–∫—Ä—ã—Ç—å –≤ TonViewer',
            url: tonViewerLink
          }]
        ]
      }
    };

    return await this.sendMessage(userId, message, options);
  }

  async sendWithdrawalStartNotification(userId, amount, walletAddress) {
    const timestamp = Math.floor(Date.now() / 1000);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–¥—Ä–µ—Å –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
    const userFriendlyAddress = this.convertToUserFriendlyAddress(walletAddress);

    const message = `
‚è≥ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞—á–∞—Ç</b>

üí∞ <b>–°—É–º–º–∞:</b> ${amount} TON
üìç <b>–ö–æ—à–µ–ª–µ–∫:</b> <code>${userFriendlyAddress}</code>
üïê <b>–í—Ä–µ–º—è:</b> ${timestamp}

‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Å–µ—Ç–∏ TON. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç –¥–æ —á–∞—Å–∞.

üìû –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏: ${timestamp}
  `.trim();

    return await this.sendMessage(userId, message);
  }

  async sendErrorNotification(userId, operation, error, debugInfo = null) {
    const timestamp = Math.floor(Date.now() / 1000);

    let message = `
‚ùå <b>–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>

üîÑ <b>–û–ø–µ—Ä–∞—Ü–∏—è:</b> ${operation}
‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> ${error}
üïê <b>–í—Ä–µ–º—è:</b> ${timestamp}
  `.trim();

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    if (debugInfo) {
      message += `\n\n<b>ID –æ–ø–µ—Ä–∞—Ü–∏–∏:</b> <code>${debugInfo.transactionId || 'N/A'}</code>`;

      if (debugInfo.errorCode) {
        message += `\n<b>–ö–æ–¥ –æ—à–∏–±–∫–∏:</b> <code>${debugInfo.errorCode}</code>`;
      }

      if (debugInfo.amount) {
        message += `\n<b>–°—É–º–º–∞:</b> ${debugInfo.amount} TON`;
      }

      if (debugInfo.fee) {
        message += `\n<b>–ö–æ–º–∏—Å—Å–∏—è:</b> ${debugInfo.fee} TON`;
      }

      if (debugInfo.walletAddress) {
        message += `\n<b>–ö–æ—à–µ–ª–µ–∫:</b> <code>${debugInfo.walletAddress.slice(0, 8)}...${debugInfo.walletAddress.slice(-6)}</code>`;
      }
    }

    message += `\n\nüìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏: ${timestamp}`;

    return await this.sendMessage(userId, message);
  }

  convertToUserFriendlyAddress(address) {
    // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UQ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (true || address.startsWith('UQ') || address.startsWith('EQ')) {
      return address;
    }

    // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 0:hex, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UQ —Ñ–æ—Ä–º–∞—Ç
    if (address.startsWith('0:')) {
      // –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—ç—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
      const hexPart = address.substring(2);
      return `UQ${hexPart.slice(0, 6)}...${hexPart.slice(-6)}`;
    }

    return address;
  }
}

export const telegramBot = new TelegramBot();
