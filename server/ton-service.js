import { TonClient, WalletContractV4, internal } from "ton";
import { mnemonicToPrivateKey } from "ton-crypto";
import dotenv from "dotenv";

dotenv.config();

class TonService {
  constructor() {
    this.client = null;
    this.wallet = null;
    this.walletContract = null;
    this.isInitialized = false;
  }

  async initialize() {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TON –∫–ª–∏–µ–Ω—Ç
      this.client = new TonClient({
        endpoint: process.env.TON_RPC_ENDPOINT || 'https://toncenter.com/api/v2/jsonRPC',
        apiKey: process.env.TON_API_KEY // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞ https://toncenter.com
      });

      // –ü–æ–ª—É—á–∞–µ–º –º–Ω–µ–º–æ–Ω–∏–∫ –∫–æ—à–µ–ª—å–∫–∞ –∫–∞–∑–∏–Ω–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const mnemonic = process.env.CASINO_WALLET_MNEMONIC;
      if (!mnemonic) {
        throw new Error('CASINO_WALLET_MNEMONIC not found in environment variables');
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–µ–º–æ–Ω–∏–∫ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
      const keyPair = await mnemonicToPrivateKey(mnemonic.split(' '));

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ—à–µ–ª—å–∫–∞ V4
      this.walletContract = WalletContractV4.create({
        publicKey: keyPair.publicKey,
        workchain: 0
      });

      this.wallet = this.client.open(this.walletContract);
      this.keyPair = keyPair;

      this.isInitialized = true;
      console.log('‚úÖ TON Service initialized successfully');
      console.log(`üíº Casino wallet address: ${this.walletContract.address.toString()}`);

      return true;
    } catch (error) {
      console.error('‚ùå Failed to initialize TON Service:', error);
      throw error;
    }
  }

  async sendTransaction(toAddress, amountTon, comment = '') {
    if (!this.isInitialized) {
      await this.initialize();
    }

    try {
      console.log(`üí∏ Sending ${amountTon} TON to ${toAddress}`);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TON –≤ nanotons
      const amountNanotons = BigInt(Math.floor(amountTon * 1e9));

      // –ü–æ–ª—É—á–∞–µ–º sequence number
      const seqno = await this.wallet.getSeqno();
      console.log(`üìä Current seqno: ${seqno}`);

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const transfer = this.walletContract.createTransfer({
        seqno,
        secretKey: this.keyPair.secretKey,
        messages: [
          internal({
            to: toAddress,
            value: amountNanotons,
            body: comment,
            bounce: false
          })
        ]
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      console.log('üì§ Sending transaction...');
      const result = await this.wallet.send(transfer);

      console.log('‚úÖ Transaction sent successfully');
      console.log('üîç Transaction result details:', {
        result: result,
        resultType: typeof result,
        hasHash: result && typeof result.hash === 'function',
        seqno: seqno,
        amount: amountTon
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º hash –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      let transactionHash = null;
      try {
        if (result && typeof result.hash === 'function') {
          transactionHash = result.hash().toString('hex');
          console.log(`üîó Transaction hash: ${transactionHash}`);
        } else {
          // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π hash –Ω–∞ –æ—Å–Ω–æ–≤–µ seqno –∏ –≤—Ä–µ–º–µ–Ω–∏
          transactionHash = `${seqno}_${Date.now()}`;
          console.log(`üîó Generated temp hash: ${transactionHash}`);
        }
      } catch (hashError) {
        console.log('‚ö†Ô∏è Could not get transaction hash:', hashError.message);
        transactionHash = `${seqno}_${Date.now()}`;
      }

      // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      console.log('‚è≥ Waiting for transaction confirmation...');
      let currentSeqno = seqno;
      while (currentSeqno == seqno) {
        console.log('‚è≥ Transaction not confirmed yet, waiting...');
        await new Promise(resolve => setTimeout(resolve, 1500));
        currentSeqno = await this.wallet.getSeqno();
      }

      console.log('‚úÖ Transaction confirmed!');
      console.log(`üîó Final transaction hash: ${transactionHash}`);

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π hash —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Å–µ—Ç–∏ TON
      let realTransactionHash = null;
      try {
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ hash
        console.log('üîç –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–ª–æ–∫—á–µ–π–Ω–µ...');
        await new Promise(resolve => setTimeout(resolve, 3000));

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
        const transactions = await this.client.getTransactions(this.walletContract.address, {
          limit: 10
        });

        // –ò—â–µ–º –Ω–∞—à—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ seqno (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫)
        for (const tx of transactions) {
          // –ò—â–µ–º –∏—Å—Ö–æ–¥—è—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –Ω–∞—à–∏–º seqno
          if (tx.description && tx.description.type === 'generic' &&
            tx.description.action && tx.description.action.type === 'send_msg') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            const txSeqno = tx.description.action.msgs_sent || 0;
            if (Math.abs(txSeqno - seqno) <= 1) { // –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
              realTransactionHash = tx.hash().toString('hex');
              console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π hash —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', realTransactionHash);
              console.log('üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ seqno:', { txSeqno, targetSeqno: seqno });
              break;
            }
          }
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ seqno, –±–µ—Ä–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∏—Å—Ö–æ–¥—è—â—É—é
        if (!realTransactionHash && transactions.length > 0) {
          for (const tx of transactions) {
            if (tx.outMessages && tx.outMessages.size > 0) {
              realTransactionHash = tx.hash().toString('hex');
              console.log('‚úÖ –í–∑—è—Ç hash –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Å—Ö–æ–¥—è—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', realTransactionHash);
              break;
            }
          }
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π hash, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π:', error.message);
      }

      const finalHash = realTransactionHash || transactionHash;
      console.log(`üîó –§–∏–Ω–∞–ª—å–Ω—ã–π hash: ${finalHash}`);

      return {
        success: true,
        hash: finalHash,
        realHash: realTransactionHash,
        tempHash: transactionHash,
        seqno: seqno,
        amount: amountTon
      };
    } catch (error) {
      console.error('‚ùå Transaction failed:', error);
      return {
        success: false,
        error: error.message,
        amount: amountTon
      };
    }
  }

  async getBalance() {
    if (!this.isInitialized) {
      await this.initialize();
    }

    try {
      const balance = await this.wallet.getBalance();
      return Number(balance) / 1e9; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ nanotons –≤ TON
    } catch (error) {
      console.error('‚ùå Failed to get balance:', error);
      return 0;
    }
  }

  getWalletAddress() {
    if (!this.walletContract) {
      return null;
    }
    return this.walletContract.address.toString();
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ TonViewer
  getTonViewerLink(transactionHash) {
    return `https://tonviewer.com/transaction/${transactionHash}`;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const tonService = new TonService();
