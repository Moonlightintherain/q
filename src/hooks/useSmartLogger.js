import { useDebugLogger } from '../components/DebugModal';
import { config } from '../config';

// –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –æ—Ç–ª–∞–¥–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
const createNoOpLogger = () => ({
  debugData: { isOpen: false, logs: [], error: null },
  addLog: () => {},
  showDebug: (title, error) => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ alert'—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    if (error) {
      alert(`${title}: ${error.message}`);
    }
  },
  closeDebug: () => {},
  clearLogs: () => {},
  logInfo: () => {},
  logSuccess: (message) => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (message.includes('–î–µ–ø–æ–∑–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω') || message.includes('—É—Å–ø–µ—à–Ω–æ')) {
      alert(message.replace(/üéâ|‚úÖ|üí∞/g, '').trim());
    }
  },
  logError: () => {},
  logWarning: () => {}
});

export function useSmartLogger() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π logger —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω debug —Ä–µ–∂–∏–º
  if (config.debugMode) {
    return useDebugLogger();
  }
  
  // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  return createNoOpLogger();
}
