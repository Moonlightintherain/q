from telethon import TelegramClient, events, functions
from telethon.tl.types import (
    UpdateNewGift, Gift, GiftPremium, GiftSticker,
    PremiumGiftOption
)

api_id = 123456
api_hash = "your_api_hash"

client = TelegramClient("userbot", api_id, api_hash)

gift_options_cache = {}  # slug ‚Üí (amount, currency)


async def load_gift_options():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∞—Ä–∫–æ–≤ (—Ü–µ–Ω—ã –∏ –≤–∞–ª—é—Ç—ã)
    """
    global gift_options_cache
    try:
        result = await client(functions.payments.GetPremiumGiftOptionsRequest())
        for opt in result.options:
            if isinstance(opt, PremiumGiftOption):
                price = opt.amount / 100  # –≤ –≤–∞–ª—é—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD)
                gift_options_cache[opt.slug] = (price, opt.currency)
        print(f"[+] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(gift_options_cache)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤")
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ gift options: {e}")


def get_gift_price(slug: str, gift_type: str):
    if gift_type == "Gift":
        return "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π (0)"
    if slug and slug in gift_options_cache:
        amount, currency = gift_options_cache[slug]
        if currency == "XTR":  # –∑–≤—ë–∑–¥—ã
            return f"{int(amount)} Stars"
        else:
            return f"{amount:.2f} {currency}"
    return "(—Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)"


def classify_sticker(gift: GiftSticker) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø NFT –ø–æ–¥–∞—Ä–∫–∞
    """
    if gift.unique and gift.upgraded:
        return "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π (—É–ª—É—á—à–µ–Ω–Ω—ã–π)"
    elif gift.unique and not gift.upgraded:
        return "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π (–Ω–µ —É–ª—É—á—à–µ–Ω–Ω—ã–π)"
    elif gift.rare:
        return "–†–µ–¥–∫–∏–π"
    else:
        return "–û–±—ã—á–Ω—ã–π"


@client.on(events.Raw)
async def handler(event):
    if isinstance(event, UpdateNewGift):
        gift = event.gift
        slug = getattr(gift, "slug", None)

        print("\nüéÅ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫!")

        if isinstance(gift, Gift):
            print(f"- –¢–∏–ø: –û–±—ã—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫")
            print(f"- ID: {gift.id}")
            print(f"- Slug: {slug}")
            print(f"- –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {gift.from_id.user_id if gift.from_id else '–∞–Ω–æ–Ω–∏–º'}")
            print(f"- –°–æ–æ–±—â–µ–Ω–∏–µ: {gift.message or '‚Äî'}")
            print(f"- –°—Ç–æ–∏–º–æ—Å—Ç—å: {get_gift_price(slug, 'Gift')}")

        elif isinstance(gift, GiftPremium):
            print(f"- –¢–∏–ø: –ü–æ–¥–∞—Ä–æ–∫ Premium")
            print(f"- –ú–µ—Å—è—Ü–µ–≤: {gift.months}")
            print(f"- Slug: {slug}")
            print(f"- –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {gift.from_id.user_id if gift.from_id else '–∞–Ω–æ–Ω–∏–º'}")
            print(f"- –°–æ–æ–±—â–µ–Ω–∏–µ: {gift.message or '‚Äî'}")
            print(f"- –°—Ç–æ–∏–º–æ—Å—Ç—å: {get_gift_price(slug, 'GiftPremium')}")

        elif isinstance(gift, GiftSticker):
            category = classify_sticker(gift)
            print(f"- –¢–∏–ø: NFT-–ø–æ–¥–∞—Ä–æ–∫ ({category})")
            print(f"- ID: {gift.id}")
            print(f"- Slug: {slug}")
            print(f"- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π: {'–î–∞' if gift.unique else '–ù–µ—Ç'}")
            print(f"- –£–ª—É—á—à–µ–Ω–Ω—ã–π: {'–î–∞' if gift.upgraded else '–ù–µ—Ç'}")
            print(f"- –†–µ–¥–∫–∏–π: {'–î–∞' if gift.rare else '–ù–µ—Ç'}")
            print(f"- –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {gift.from_id.user_id if gift.from_id else '–∞–Ω–æ–Ω–∏–º'}")
            print(f"- –°–æ–æ–±—â–µ–Ω–∏–µ: {gift.message or '‚Äî'}")
            print(f"- –°—Ç–æ–∏–º–æ—Å—Ç—å: {get_gift_price(slug, 'GiftSticker')}")

        else:
            print(f"- –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞: {type(gift)}")
            print(f"- Slug: {slug}")
            print(f"- –°—Ç–æ–∏–º–æ—Å—Ç—å: {get_gift_price(slug, 'Other')}")


async def main():
    await load_gift_options()
    print("Userbot –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë–º –ø–æ–¥–∞—Ä–∫–æ–≤...")
    await client.run_until_disconnected()


with client:
    client.loop.run_until_complete(main())
